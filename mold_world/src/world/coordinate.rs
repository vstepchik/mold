pub fn z_order_32(x: u16, y: u16) -> u32 {
    const SHIFTS: [u32; 4] = [1, 2, 4, 8];
    const MASKS: [u32; 4] = [0x55555555, 0x33333333, 0x0F0F0F0F, 0x00FF00FF];
    let mut x: u32 = x as u32;
    let mut y: u32 = y as u32;

    x = (x | (x << SHIFTS[3])) & MASKS[3];
    x = (x | (x << SHIFTS[2])) & MASKS[2];
    x = (x | (x << SHIFTS[1])) & MASKS[1];
    x = (x | (x << SHIFTS[0])) & MASKS[0];

    y = (y | (y << SHIFTS[3])) & MASKS[3];
    y = (y | (y << SHIFTS[2])) & MASKS[2];
    y = (y | (y << SHIFTS[1])) & MASKS[1];
    y = (y | (y << SHIFTS[0])) & MASKS[0];

    x | (y << 1)
}

pub fn z_order_64(x: u32, y: u32) -> u64 {
    const SHIFTS: [u64; 5] = [1, 2, 4, 8, 16];
    const MASKS: [u64; 5] = [
        0x5555555555555555,
        0x3333333333333333,
        0x0F0F0F0F0F0F0F0F,
        0x00FF00FF00FF00FF,
        0x0000FFFF0000FFFF,
    ];
    let mut x: u64 = x as u64;
    let mut y: u64 = y as u64;

    x = (x | (x << SHIFTS[4])) & MASKS[4];
    x = (x | (x << SHIFTS[3])) & MASKS[3];
    x = (x | (x << SHIFTS[2])) & MASKS[2];
    x = (x | (x << SHIFTS[1])) & MASKS[1];
    x = (x | (x << SHIFTS[0])) & MASKS[0];

    y = (y | (y << SHIFTS[4])) & MASKS[4];
    y = (y | (y << SHIFTS[3])) & MASKS[3];
    y = (y | (y << SHIFTS[2])) & MASKS[2];
    y = (y | (y << SHIFTS[1])) & MASKS[1];
    y = (y | (y << SHIFTS[0])) & MASKS[0];

    x | (y << 1)
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn z_order_32_assertions() {
        assert_eq!(z_order_32(0b_00000000_00000000, 0b_00000000_00000001), 0b_00000000_00000000_00000000_00000010);
        assert_eq!(z_order_32(0b_00000000_00000001, 0b_00000000_00000000), 0b_00000000_00000000_00000000_00000001);
        assert_eq!(z_order_32(0b_00000000_00000000, 0b_00000000_00000000), 0b_00000000_00000000_00000000_00000000);
        assert_eq!(z_order_32(0b_11111111_11111111, 0b_11111111_11111111), 0b_11111111_11111111_11111111_11111111);
        assert_eq!(z_order_32(0b_00000000_00000010, 0b_00000000_00000010), 0b_00000000_00000000_00000000_00001100);
        assert_eq!(z_order_32(0b_10101010_10101010, 0b_01010101_01010101), 0b_01100110_01100110_01100110_01100110);
    }

    #[test]
    fn z_order_64_assertions() {
        assert_eq!(z_order_64(0b_00000000_00000000_00000000_00000000, 0b_00000000_00000000_00000000_00000001), 0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000010);
        assert_eq!(z_order_64(0b_00000000_00000000_00000000_00000001, 0b_00000000_00000000_00000000_00000000), 0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001);
        assert_eq!(z_order_64(0b_00000000_00000000_00000000_00000000, 0b_00000000_00000000_00000000_00000000), 0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000);
        assert_eq!(z_order_64(0b_11111111_11111111_11111111_11111111, 0b_11111111_11111111_11111111_11111111), 0b_11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111);
        assert_eq!(z_order_64(0b_00000000_00000000_00000010_00000000, 0b_00000000_00000000_00000010_00000000), 0b_00000000_00000000_00000000_00000000_00000000_00001100_00000000_00000000);
        assert_eq!(z_order_64(0b_10101010_10101010_10101010_10101010, 0b_01010101_01010101_01010101_01010101), 0b_01100110_01100110_01100110_01100110_01100110_01100110_01100110_01100110);
    }
}
